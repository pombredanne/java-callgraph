diff --git a/pom.xml b/pom.xml
index 08ebb666..0157a994 100644
--- a/pom.xml
+++ b/pom.xml
@@ -373,6 +373,58 @@
                     <autoReleaseAfterClose>true</autoReleaseAfterClose>
                 </configuration>
             </plugin>
+
+            <plugin>
+                <groupId>org.jacoco</groupId>
+                <artifactId>jacoco-maven-plugin</artifactId>
+                <version>0.8.6</version>
+                <executions>
+                    <execution>
+                        <id>default-prepare-agent</id>
+                        <goals>
+                            <goal>prepare-agent</goal>
+                        </goals>
+                    </execution>
+                    <execution>
+                        <id>jacoco-report</id>
+                        <phase>test</phase>
+                        <goals>
+                            <goal>report</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-jar-plugin</artifactId>
+                <version>3.2.0</version>
+                <executions>
+                    <execution>
+                        <goals>
+                            <goal>test-jar</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <version>3.3.0</version>
+                <configuration>
+                    <descriptorRefs>
+                        <descriptorRef>jar-with-dependencies</descriptorRef>
+                    </descriptorRefs>
+                </configuration>
+                <executions>
+                    <execution>
+                       <id>make-assembly</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
         </plugins>
 
         <pluginManagement>
@@ -457,4 +509,20 @@
             </plugins>
         </pluginManagement>
     </build>
+
+    <reporting>
+        <plugins>
+            <plugin>
+                <groupId>org.jacoco</groupId>
+                <artifactId>jacoco-maven-plugin</artifactId>
+                <reportSets>
+                    <reportSet>
+                        <reports>
+                            <report>report</report>
+                        </reports>
+                    </reportSet>
+                </reportSets>
+            </plugin>
+        </plugins>
+    </reporting>
 </project>
diff --git a/src/test/java/net/ripe/rpki/commons/validation/X509ResourceCertificateParentChildValidatorTest.java b/src/test/java/net/ripe/rpki/commons/validation/X509ResourceCertificateParentChildValidatorTest.java
index cb8b7dd9..18f3d25a 100644
--- a/src/test/java/net/ripe/rpki/commons/validation/X509ResourceCertificateParentChildValidatorTest.java
+++ b/src/test/java/net/ripe/rpki/commons/validation/X509ResourceCertificateParentChildValidatorTest.java
@@ -2,6 +2,9 @@ package net.ripe.rpki.commons.validation;
 
 import com.pholser.junit.quickcheck.From;
 import com.pholser.junit.quickcheck.Property;
+import com.pholser.junit.quickcheck.generator.Also;
+import com.pholser.junit.quickcheck.generator.NullAllowed;
+import com.pholser.junit.quickcheck.generator.Size;
 import com.pholser.junit.quickcheck.runner.JUnitQuickcheck;
 import net.ripe.ipresource.IpResource;
 import net.ripe.ipresource.IpResourceSet;
@@ -18,6 +21,7 @@ import net.ripe.rpki.commons.validation.objectvalidators.X509ResourceCertificate
 import net.ripe.rpki.commons.validation.objectvalidators.X509ResourceCertificateParentChildValidator;
 import net.ripe.rpki.commons.validation.objectvalidators.X509ResourceCertificateValidator;
 import net.ripe.rpki.commons.validation.properties.IpResourceGen;
+import net.ripe.rpki.commons.validation.properties.URIGen;
 import org.bouncycastle.asn1.x509.KeyUsage;
 import org.joda.time.DateTime;
 import org.junit.Before;
@@ -27,9 +31,12 @@ import org.junit.runner.RunWith;
 import javax.security.auth.x500.X500Principal;
 import java.math.BigInteger;
 import java.net.URI;
+import java.net.URISyntaxException;
 import java.security.KeyPair;
 import java.util.EnumSet;
 import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
 
 import static net.ripe.rpki.commons.crypto.x509cert.X509CertificateBuilderHelper.DEFAULT_SIGNATURE_PROVIDER;
 import static org.hamcrest.Matchers.greaterThan;
@@ -223,7 +230,7 @@ public class X509ResourceCertificateParentChildValidatorTest {
     }
 
     @Property
-    public void validParentChildSubResources(List<@From(IpResourceGen.class) IpResource> parentResources, int childResourceCount) {
+    public void validParentChildSubResources(List<@From(IpResourceGen.class) IpResource> parentResources, int childResourceCount, @Size(min=0, max=1000) List<@From(URIGen.class) URI> crlUris) throws URISyntaxException {
         assumeThat(parentResources.size(), greaterThan(0));
         assumeThat(childResourceCount, greaterThan(0));
 
@@ -236,7 +243,7 @@ public class X509ResourceCertificateParentChildValidatorTest {
             return;
         }
 
-        ValidationResult result = validateParentChildPair(parentResourceSet, childResourceSet);
+        ValidationResult result = validateParentChildPair(parentResourceSet, childResourceSet, crlUris);
         assertFalse(result.hasFailures());
     }
 
@@ -305,10 +312,30 @@ public class X509ResourceCertificateParentChildValidatorTest {
         return validateParentChildPairImpl(parentResourceSet, childResourceSet, false);
     }
 
+    private ValidationResult validateParentChildPair(IpResourceSet parentResourceSet, IpResourceSet childResourceSet, List<URI> crlUris) {
+        return validateParentChildPairImpl(parentResourceSet, childResourceSet, false, crlUris);
+    }
+
     private ValidationResult validateParentChildPairImpl(IpResourceSet parentResourceSet, IpResourceSet childResourceSet, boolean reconsidered) {
-        final X509ResourceCertificate parentCertificate = createRootCertificateBuilder()
-            .withResources(parentResourceSet)
-            .build();
+        return validateParentChildPairImpl(parentResourceSet, childResourceSet, reconsidered, null);
+    }
+
+    private ValidationResult validateParentChildPairImpl(IpResourceSet parentResourceSet, IpResourceSet childResourceSet, boolean reconsidered, List<URI> crlUris) {
+        final X509ResourceCertificate parentCertificate;
+
+        if (crlUris == null) {
+            parentCertificate = createRootCertificateBuilder()
+                    .withResources(parentResourceSet)
+                    .build();
+        } else {
+            URI[] arrayUris = new URI[crlUris.size()];
+            arrayUris = crlUris.toArray(arrayUris);
+
+            parentCertificate = createRootCertificateBuilder()
+                    .withResources(parentResourceSet)
+                    .withCrlDistributionPoints(arrayUris)
+                    .build();
+        }
 
         final X509ResourceCertificate childCertificate = createChildCertificateBuilder()
             .withResources(childResourceSet)
diff --git a/src/test/java/net/ripe/rpki/commons/validation/properties/URIGen.java b/src/test/java/net/ripe/rpki/commons/validation/properties/URIGen.java
new file mode 100644
index 00000000..7e43902c
--- /dev/null
+++ b/src/test/java/net/ripe/rpki/commons/validation/properties/URIGen.java
@@ -0,0 +1,172 @@
+package net.ripe.rpki.commons.validation.properties;
+
+import com.pholser.junit.quickcheck.generator.GenerationStatus;
+import com.pholser.junit.quickcheck.generator.Generator;
+import com.pholser.junit.quickcheck.random.SourceOfRandomness;
+import java.net.URI;
+
+public class URIGen extends Generator<URI> {
+    public final int HIER_AUTHORITY_PATH = 0;
+    public final int HIER_PATH_ABSOLUTE = 1;
+    public final int HIER_PATH_ROOTLESS = 2;
+    public final int HIER_PATH_EMPTY = 3;
+
+    public final int HOST_REG_NAME = 0;
+    public final int HOST_IPV4 = 1;
+    public final int HOST_IPV6 = 2;
+
+    private final String UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
+    private final String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
+    private final String NUMERIC = "0123456789";
+
+    private SourceOfRandomness r;
+
+    public URIGen() {
+        super(URI.class);
+    }
+
+    @Override
+    public URI generate(SourceOfRandomness r, GenerationStatus generationStatus) {
+        this.r = r;
+
+        try {
+            return buildURI();
+        } catch (Exception exception) {
+            // bad uri, interesting but ok or invalid options for uri generation
+            System.err.println(exception.getMessage());
+            exception.printStackTrace();
+        }
+
+        return null;
+    }
+
+    private URI buildURI() throws Exception {
+        String uri = hierPart(scheme()) + query() + fragment();
+        return new URI(uri);
+    }
+
+    private String hierPart(String scheme) throws Exception {
+        switch (r.nextInt(0, 3)) {
+            case HIER_AUTHORITY_PATH: return scheme + authority() + path();
+            case HIER_PATH_ABSOLUTE: return scheme + path();
+            case HIER_PATH_ROOTLESS: return scheme + path("");
+            case HIER_PATH_EMPTY: return "";
+            default: throw new Exception("Invalid option for hierPart");
+        }
+    }
+
+    private String scheme() {
+        String[] commonScheme = { "http", "https", "ftp", "ftps", "mailto", "file", "data", "irc", "blob", "sftp" };
+        int pickScheme = r.nextInt(0, commonScheme.length);
+
+        if (pickScheme == commonScheme.length) {
+            String SCHEME = UPPERCASE + LOWERCASE + NUMERIC + "+.-";
+            return randomString(1, 1, UPPERCASE + LOWERCASE, false)
+                     + randomString(2, 100, SCHEME, false) + ":";
+        }
+
+        return commonScheme[pickScheme] + ":";
+    }
+
+    private String authority() throws Exception {
+        return "//" + userinfo() + host() + port();
+    }
+
+    private String userinfo() {
+        if (r.nextBoolean()) {
+            return "";
+        }
+
+        return randomString(1, 100) + ":" + randomString(0, 100) + "@";
+    }
+
+    private String host() throws Exception {
+        switch (r.nextInt(0,2)) {
+            case HOST_REG_NAME: return regName();
+            case HOST_IPV4: return ip4();
+            case HOST_IPV6: return ipv6();
+            default: throw new Exception("Invalid option for host");
+        }
+    }
+
+    private String regName() {
+        String REG = UPPERCASE + LOWERCASE + NUMERIC + ".-";
+        return randomString(1, 255, REG);
+    }
+
+    private String ip4() {
+        return r.nextInt(0,255) + "." + r.nextInt(0,255) + "." + r.nextInt(0,255) + "." + r.nextInt(0,255);
+    }
+
+    private String ipv6() {
+        return String.format("%04X:%04X:%04X:%04X:%04X:%04X:%04X:%04X",
+                r.nextInt(0, 65535), r.nextInt(0, 65535), r.nextInt(0, 65535), r.nextInt(0, 65535),
+                r.nextInt(0, 65535), r.nextInt(0, 65535), r.nextInt(0, 65535), r.nextInt(0, 65535));
+    }
+
+    private String port() {
+        if (r.nextBoolean()) {
+            return "";
+        }
+
+        return ":" + r.nextInt(0, 65535);
+    }
+
+    private String path() {
+        return path("/");
+    }
+
+    private String path(String append) {
+        String PATH = LOWERCASE + UPPERCASE + NUMERIC + ".+;=";
+        return append +
+                randomString(1, 1, PATH) +
+                randomString(1, 255, PATH + "/");
+    }
+
+    private String query() {
+        if (r.nextBoolean()) {
+            return "";
+        }
+
+        String QUERY = LOWERCASE + UPPERCASE + NUMERIC + "/?=";
+        return "?" + randomString(1, 255, QUERY);
+    }
+
+    private String fragment() {
+        if (r.nextBoolean()) {
+            return "";
+        }
+
+        String FRAGMENT = LOWERCASE + UPPERCASE + NUMERIC + "/?=";
+        return "#" + randomString(1, 255, FRAGMENT);
+    }
+
+    private String randomString(int minLength, int maxLength) {
+        return randomString(minLength, maxLength, LOWERCASE + UPPERCASE + NUMERIC);
+    }
+
+    private String randomString(int minLength, int maxLength, String possibleCharacters) {
+        return randomString(minLength, maxLength, possibleCharacters, true);
+    }
+
+    private String randomString(int minLength, int maxLength, String possibleCharacters, boolean genEncodedChars) {
+        String HEX_DIGIT = "0123456789ABCDEF";
+        StringBuilder sb = new StringBuilder();
+        int len = r.nextInt(minLength, maxLength);
+
+        for (int i = 0; i < len; i++) {
+            if (genEncodedChars) {
+                int charIdx = r.nextInt(0, possibleCharacters.length());
+                if (charIdx == possibleCharacters.length()) {
+                    sb.append("%").append(randomString(2, 2, HEX_DIGIT, false));
+                } else {
+                    sb.append(possibleCharacters.charAt(charIdx));
+                }
+            } else {
+                sb.append(possibleCharacters.charAt(r.nextInt(0, possibleCharacters.length() - 1)));
+            }
+        }
+
+        return sb.toString();
+    }
+}
diff --git a/src/test/java/net/ripe/rpki/commons/validation/properties/URIGenTest.java b/src/test/java/net/ripe/rpki/commons/validation/properties/URIGenTest.java
new file mode 100644
index 00000000..e9a88133
--- /dev/null
+++ b/src/test/java/net/ripe/rpki/commons/validation/properties/URIGenTest.java
@@ -0,0 +1,26 @@
+package net.ripe.rpki.commons.validation.properties;
+
+import com.pholser.junit.quickcheck.generator.GenerationStatus;
+import com.pholser.junit.quickcheck.internal.generator.SimpleGenerationStatus;
+import com.pholser.junit.quickcheck.random.SourceOfRandomness;
+import org.junit.jupiter.api.Test;
+
+import java.net.URI;
+import java.util.Random;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class URIGenTest {
+
+    @Test
+    void generateTest() {
+        URIGen uriGen = new URIGen();
+        Random random = new Random();
+        SourceOfRandomness r = new SourceOfRandomness(random);
+
+        for (int i = 0; i < 100_000; i++) {
+            URI uri = uriGen.generate(r, null);
+            assertNotNull(uri);
+        }
+    }
+}
\ No newline at end of file
